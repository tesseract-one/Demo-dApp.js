import { Tesseract } from '@tesseractjs/ethereum-web3'
import abi from '../assets/crypto_kitties_abi.json'
import { AbiItem } from 'web3-utils'

const web3: Web3 = await Tesseract.Ethereum.Web3('network_endpoint')
const accounts: string[] = await web3.eth.getAccounts()
const ctyptoKittiesAddress = '0x06012c8cf97BEaD5deAe237070F9587f8E7A266d'
const cryptoKittiesABI = abi as AbiItem[]
const contract = new web3.eth.Contract(cryptoKittiesABI, ctyptoKittiesAddress)
const kittiesAsBigNumber = await contract.methods.balanceOf(accounts[0]).call()
const kitties = kittiesAsBigNumber.toString()

// const kittiesIds = await contract.methods.tokensOfOwner(accounts[0]).call()
// unfortunately we can't get kittiesIds, there is a reason why ->
// tokensOfOwner was not implemented efficiently because doing so would require a lot of (expensive) storage
// in the blockchain. Instead, we just loop over all the cats and see if their owner matches the function argument.
// Sadly, geth apparently just kills a function if it takes too long and returns an empty response.
// (The function was never intended to be called on-chain.)